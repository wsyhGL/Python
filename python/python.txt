python 笔记

grep搜索
-n 显示数字行
-v grep -v "ntfs" 1.txt 不包含“ntfs”
grep "^ntfs" 1.txt 以ntfs开头
grep "s$" 1.txt 以s结尾

mv 进行重命名、移动
mv 1.txt 11.txt 将1.txt 重命名为11.txt
mv 1.txt make/ 将1.txt移动到make文件夹

find / -name "*name*"搜索根目录含有name的文件
find ./ -size  +2M 安大小搜索
find ./ -oerm 777 按权限搜索

python
#单行注视
''' '''多行注释或 """

python2中文的解决：
#coding=utf-8
或
#-*- coding:utf-8 -*-

#if-else 类型转换
age = input("请输入年龄：")
age_num = int(age)
if age_num>18:
    print("已成年")
else:
    print("未成年")

//取整
2**n:2的n次方
%取余

输出多个bianliang
name = "Guu"
age = 20
address = "jinan"
print("姓名%s,年龄%d,地址%s"%(name,age,address))

for temp in name:for循环

字符串的切片：name[起始位置:终止位置:步长]
name[::-1] 倒序输出字符串

列表

列表：names=["GUU","LXD"]
names.append(添加的内容)
names.insert(位置,添加的内容)
name3 = names + name1#将names、name1合成一个列表
names.extend(name1)#将name1添加到names中
names.pop()#弹出最后一个元素
names.remove(x)#删除最左边的x元素
列表也可用切片
del names(1)#删除下表1的元素
names[0]=xxx#修改下表0的元素
xx in(not in)names#查询元素是否在names中
len(names)#列表元素的个数
names.sort()从小到大排序
names.sort(reverse = True)从大到小排序
names.reverse()逆序

字典

infor = {key:values,key1:value2}
字典的增删改查
del infor['x']#删除key为x的元素
infor.get("x")#查询key为x的元素

for-else应用

names=[11,22,33,44]
for temp in names:
	print(temp)
else:
	print("+++")
#else在for执行后执行


字典的常见操作
names.keys()#获得字典的key
names.values()#获得字典的value
for temp in infor.items():
	print("key=%s,value=%s"%(temp[0],temp[1]))

for A,B infor.items():
	print("Key=%s,value=%s"%(A,B))

元组

nums = (11,12)
元组类型的数据不能修改

函数：
def 函数名():

全局变量：
global用来对一个全局变量的声明

缺省参数
def test(a,b=22,c=33):#缺省参数
    print(a)
    print(b)
    print(c)

test(11,c=55)#c=55是命名参数

不定长参数

def sum_nums(a,b, *args):
    print(a)
    print(b)
    print(args)

sum_nums(11,22,33,44,55)

不定长参数2
def test(a,b,c=33,*args,**kwargs):
    print(a)
    print(b)
    print(c)
    print(args)
    print(kwargs)

test(11,22,33,44,55,66,task=88,done=99)

拆包
def test(a,b,c=33,*args,**kwargs):
    print(a)
    print(b)
    print(c)
    print(args)
    print(kwargs)
A=(44,55,66)
B={"name":"GUU","age":19}

test(11,22,33,*A,**B)

不可变类型：数字、字符串、元组
可变类型：列表、字典

匿名函数

test = lambda a,b:a+b

result = test(11,22)
print(result)

字典的排序

#字典的排序
infors= [{"name":"A","age":4},{"name":"B","age":2},{"name":"C","age":3}]

infors.sort(key=lambda x:x['age'])

print(infors)

交换两个变量：
a=4
b=5
a=b+a
b=a-b
a=a-b

a,b=b,a

文件

f = open("文件名",r)
f.read()
f.write()
文件的读写：
f.tell()#指针的位置
f.seek(3,1)#从当前位置跳3个位置

#实现文件的复制
oldFileName = input("输入要复制的文件名")

oldFile = open(oldFileName,"r")

position = oldFileName.rfind(".")
newFileName = oldFileName[:position]+"[附件]"+oldFileName[position:]
newFile = open(newFileName,"w")

while True:
    content = oldFile.read(1024)
    if len(content)==0:
        break

    newFile.write(content)

oldFile.close()
newFile.close()

类和对象

class Cat:
    #初始化对象
    def __init__(self,newName,newAge):
        self.name = newName
        self.age = newAge

    def __str__(self):
        return "%s的年龄是:%d"%(self.name,self.age)

    #方法

    def eat(self):
        print("猫在吃鱼")

    def drink(self):
        print("喝水")

    def intor(self):
        print("%s的年龄是%d"%(self.name,self.age))

#创建一个对象
tom = Cat("TOM",10)
lanmao = Cat("BlueCat",10)

print(tom)
print(lanmao)

私有属性：__name;
私有方法：__fun();

继承

重写
class Animal:
    def eat(self):
        print("-----eat-----")

    def bark(self):
        print("======bark====")

class dog(Animal):
    def bark(self):
        print("Bigeat")
       #第一种调用
       #Animal.bark(self)
       #第二种
        super().bark()

su = dog()
su.bark()

多继承

class Base(object):
    def test(self):
        print("====Base====")
        
class A(Base):
    def test(self):
        print("====A====")
        
class B(Base):
    def test(self):
        print("====B====")
        
class C(A,B):#多继承
    pass

c = C()
print(C.__mro__)#c的

类属性和实例属性

class Tool(object):
    #类属性
    num = 0

    def __init__(self, newName):
        #实例属性
        self.name = newName
        #对类属性操作
        Tool.num += 1

tool = Tool("A")
tool22 = Tool("B")
print(Tool.num)

实例方法、类方法、静态方法

class Game(object):

    #类属性
    num = 0

    #实例方法
    def __init__(self):
        #实例属性
        self.name = "LXD"

    #类方法
    @classmethod
    def add_num(cls):
        cls.num = 100

    #静态方法
    @staticmethod
    def print_menu():
        print("+++Play Game+++")


game = Game();
#Game.add_num()#可以通过类名调用类方法
game.add_num()#还可以通过对象调用
print(Game.num)

#Game.print_menu()
game.print_menu()

抛出自定义的异常

class ShortInputException(Exception):
    def __init__(self,length,atleast):
        self.length = length
        self.atleast = atleast

def main():
    try:
        s = input("请输入：")
        if len(s)<3:
            raise ShortInputException(len(s),3)

    except ShortInputException as result:
        print("ShortInputException:输入的长度为%d,长度至少为%d"%(result.length,result.atleast))

    else:
        print("没有异常发生")

列表生成器
b=[i for i in range(1,10)]

b=[i for i in range(10) i%2==0]#取0到9之间的偶数

b=[(i,j)for i in rang(3) for j in range(2)]

eval()#转化成上一个类型                 
